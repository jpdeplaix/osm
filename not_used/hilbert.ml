let dilate x =
  let x = (x lor (x lsl 16)) land 0x0000FFFF0000FFFF in
  let x = (x lor (x lsl 8)) land  0x00FF00FF00FF00FF in
  let x = (x lor (x lsl 4)) land  0x0F0F0F0F0F0F0F0F in
  let x = (x lor (x lsl 2)) land  0x3333333333333333 in
  let x = (x lor (x lsl 1)) land  0x5555555555555555 in
  x

(* Encoding and decoding the Hilbert order, Xian Liu and Gunther Schrack *)

let hilbert_coordinate_1 x y =
  let mask = 0xffffffff in
  let heven = x lxor y in
  let notx = (lnot x) land mask in
  let noty = (lnot y) land mask in
  let temp = notx lxor y in
  let v1 = ref 0 in
  let v0 = ref 0 in
  for k = 1 to 31 do
    let v1' = ((!v1 land heven) lor ((!v0 lxor noty) land temp)) lsr 1 in
    v0 :=
      ((!v0 land (!v1 lxor notx)) lor ((lnot !v0) land (!v1 lxor noty))) lsr 1;
    v1 := v1'
  done;
  let hodd = ((lnot !v0) land (!v1 lxor x)) lor (!v0 land (!v1 lxor noty)) in
  ((dilate hodd) lsl 1) lor (dilate heven) (*- min_int*)

(****)

(*
let transform n x y =
  match n with
    0 -> (x, y)
  | 1 -> (y, x)
  | 2 -> (lnot x, lnot y)
  | 3 -> (lnot y, lnot x)
  | _ -> assert false

let compose = (lxor)

let quadrant x y =
  if y then begin
    if x then 2 else 1
  end else
    if x then 3 else 0

let quadrant_transform q =
  match q with
    0     -> 1
  | 1 | 2 -> 0
  | 3     -> 3
  | _ -> assert false

let rec coord x y w n z =
  if w = 0 then
    (n, z)
  else begin
    let q = quadrant (x land w <> 0) (y land w <> 0) in
    let n' = quadrant_transform q in
    let (x, y) = transform n' x y in
(*
Format.eprintf "%d %d %d %d %d@." w q n' x y;
*)
    coord x y (w lsr 1) (compose n n') ((z lsl 2) lor q)
  end

let quadrant = Array.make 1024 0
let bytes = Array.make 1024 0

let _ =
  for n = 0 to 3 do
    for x = 0 to 15 do
      for y = 0 to 15 do
        let (x', y') = transform n x y in
        let (n', z) = coord x' y' 8 0 0 in
        let j = (n lsl 8) lor (x lsl 4) lor y in
(*
        Format.eprintf "%03x %02x %x %02x@."
          j z (compose n n')
          (hilbert_coordinate_1 (x' land 15) (y' land 15));
*)
        quadrant.(j) <- compose n n';
        bytes.(j) <- z
      done
    done
  done

let _ =
for i = 0 to 1023 do
  Format.printf "%02x@." bytes.(i)
done;
for i = 0 to 1023 do
  Format.printf "%d@." quadrant.(i)
done
*)

let bytes =
  [|0x00; 0x03; 0x04; 0x05; 0x3a; 0x3b; 0x3c; 0x3f;
    0x40; 0x41; 0x4e; 0x4f; 0x50; 0x53; 0x54; 0x55;
    0x01; 0x02; 0x07; 0x06; 0x39; 0x38; 0x3d; 0x3e;
    0x43; 0x42; 0x4d; 0x4c; 0x51; 0x52; 0x57; 0x56;
    0x0e; 0x0d; 0x08; 0x09; 0x36; 0x37; 0x32; 0x31;
    0x44; 0x47; 0x48; 0x4b; 0x5e; 0x5d; 0x58; 0x59;
    0x0f; 0x0c; 0x0b; 0x0a; 0x35; 0x34; 0x33; 0x30;
    0x45; 0x46; 0x49; 0x4a; 0x5f; 0x5c; 0x5b; 0x5a;
    0x10; 0x11; 0x1e; 0x1f; 0x20; 0x21; 0x2e; 0x2f;
    0x7a; 0x79; 0x76; 0x75; 0x60; 0x63; 0x64; 0x65;
    0x13; 0x12; 0x1d; 0x1c; 0x23; 0x22; 0x2d; 0x2c;
    0x7b; 0x78; 0x77; 0x74; 0x61; 0x62; 0x67; 0x66;
    0x14; 0x17; 0x18; 0x1b; 0x24; 0x27; 0x28; 0x2b;
    0x7c; 0x7d; 0x72; 0x73; 0x6e; 0x6d; 0x68; 0x69;
    0x15; 0x16; 0x19; 0x1a; 0x25; 0x26; 0x29; 0x2a;
    0x7f; 0x7e; 0x71; 0x70; 0x6f; 0x6c; 0x6b; 0x6a;
    0xea; 0xe9; 0xe6; 0xe5; 0xda; 0xd9; 0xd6; 0xd5;
    0x80; 0x81; 0x8e; 0x8f; 0x90; 0x93; 0x94; 0x95;
    0xeb; 0xe8; 0xe7; 0xe4; 0xdb; 0xd8; 0xd7; 0xd4;
    0x83; 0x82; 0x8d; 0x8c; 0x91; 0x92; 0x97; 0x96;
    0xec; 0xed; 0xe2; 0xe3; 0xdc; 0xdd; 0xd2; 0xd3;
    0x84; 0x87; 0x88; 0x8b; 0x9e; 0x9d; 0x98; 0x99;
    0xef; 0xee; 0xe1; 0xe0; 0xdf; 0xde; 0xd1; 0xd0;
    0x85; 0x86; 0x89; 0x8a; 0x9f; 0x9c; 0x9b; 0x9a;
    0xf0; 0xf3; 0xf4; 0xf5; 0xca; 0xcb; 0xcc; 0xcf;
    0xba; 0xb9; 0xb6; 0xb5; 0xa0; 0xa3; 0xa4; 0xa5;
    0xf1; 0xf2; 0xf7; 0xf6; 0xc9; 0xc8; 0xcd; 0xce;
    0xbb; 0xb8; 0xb7; 0xb4; 0xa1; 0xa2; 0xa7; 0xa6;
    0xfe; 0xfd; 0xf8; 0xf9; 0xc6; 0xc7; 0xc2; 0xc1;
    0xbc; 0xbd; 0xb2; 0xb3; 0xae; 0xad; 0xa8; 0xa9;
    0xff; 0xfc; 0xfb; 0xfa; 0xc5; 0xc4; 0xc3; 0xc0;
    0xbf; 0xbe; 0xb1; 0xb0; 0xaf; 0xac; 0xab; 0xaa;
    0x00; 0x01; 0x0e; 0x0f; 0x10; 0x13; 0x14; 0x15;
    0xea; 0xeb; 0xec; 0xef; 0xf0; 0xf1; 0xfe; 0xff;
    0x03; 0x02; 0x0d; 0x0c; 0x11; 0x12; 0x17; 0x16;
    0xe9; 0xe8; 0xed; 0xee; 0xf3; 0xf2; 0xfd; 0xfc;
    0x04; 0x07; 0x08; 0x0b; 0x1e; 0x1d; 0x18; 0x19;
    0xe6; 0xe7; 0xe2; 0xe1; 0xf4; 0xf7; 0xf8; 0xfb;
    0x05; 0x06; 0x09; 0x0a; 0x1f; 0x1c; 0x1b; 0x1a;
    0xe5; 0xe4; 0xe3; 0xe0; 0xf5; 0xf6; 0xf9; 0xfa;
    0x3a; 0x39; 0x36; 0x35; 0x20; 0x23; 0x24; 0x25;
    0xda; 0xdb; 0xdc; 0xdf; 0xca; 0xc9; 0xc6; 0xc5;
    0x3b; 0x38; 0x37; 0x34; 0x21; 0x22; 0x27; 0x26;
    0xd9; 0xd8; 0xdd; 0xde; 0xcb; 0xc8; 0xc7; 0xc4;
    0x3c; 0x3d; 0x32; 0x33; 0x2e; 0x2d; 0x28; 0x29;
    0xd6; 0xd7; 0xd2; 0xd1; 0xcc; 0xcd; 0xc2; 0xc3;
    0x3f; 0x3e; 0x31; 0x30; 0x2f; 0x2c; 0x2b; 0x2a;
    0xd5; 0xd4; 0xd3; 0xd0; 0xcf; 0xce; 0xc1; 0xc0;
    0x40; 0x43; 0x44; 0x45; 0x7a; 0x7b; 0x7c; 0x7f;
    0x80; 0x83; 0x84; 0x85; 0xba; 0xbb; 0xbc; 0xbf;
    0x41; 0x42; 0x47; 0x46; 0x79; 0x78; 0x7d; 0x7e;
    0x81; 0x82; 0x87; 0x86; 0xb9; 0xb8; 0xbd; 0xbe;
    0x4e; 0x4d; 0x48; 0x49; 0x76; 0x77; 0x72; 0x71;
    0x8e; 0x8d; 0x88; 0x89; 0xb6; 0xb7; 0xb2; 0xb1;
    0x4f; 0x4c; 0x4b; 0x4a; 0x75; 0x74; 0x73; 0x70;
    0x8f; 0x8c; 0x8b; 0x8a; 0xb5; 0xb4; 0xb3; 0xb0;
    0x50; 0x51; 0x5e; 0x5f; 0x60; 0x61; 0x6e; 0x6f;
    0x90; 0x91; 0x9e; 0x9f; 0xa0; 0xa1; 0xae; 0xaf;
    0x53; 0x52; 0x5d; 0x5c; 0x63; 0x62; 0x6d; 0x6c;
    0x93; 0x92; 0x9d; 0x9c; 0xa3; 0xa2; 0xad; 0xac;
    0x54; 0x57; 0x58; 0x5b; 0x64; 0x67; 0x68; 0x6b;
    0x94; 0x97; 0x98; 0x9b; 0xa4; 0xa7; 0xa8; 0xab;
    0x55; 0x56; 0x59; 0x5a; 0x65; 0x66; 0x69; 0x6a;
    0x95; 0x96; 0x99; 0x9a; 0xa5; 0xa6; 0xa9; 0xaa;
    0xaa; 0xab; 0xac; 0xaf; 0xb0; 0xb1; 0xbe; 0xbf;
    0xc0; 0xc3; 0xc4; 0xc5; 0xfa; 0xfb; 0xfc; 0xff;
    0xa9; 0xa8; 0xad; 0xae; 0xb3; 0xb2; 0xbd; 0xbc;
    0xc1; 0xc2; 0xc7; 0xc6; 0xf9; 0xf8; 0xfd; 0xfe;
    0xa6; 0xa7; 0xa2; 0xa1; 0xb4; 0xb7; 0xb8; 0xbb;
    0xce; 0xcd; 0xc8; 0xc9; 0xf6; 0xf7; 0xf2; 0xf1;
    0xa5; 0xa4; 0xa3; 0xa0; 0xb5; 0xb6; 0xb9; 0xba;
    0xcf; 0xcc; 0xcb; 0xca; 0xf5; 0xf4; 0xf3; 0xf0;
    0x9a; 0x9b; 0x9c; 0x9f; 0x8a; 0x89; 0x86; 0x85;
    0xd0; 0xd1; 0xde; 0xdf; 0xe0; 0xe1; 0xee; 0xef;
    0x99; 0x98; 0x9d; 0x9e; 0x8b; 0x88; 0x87; 0x84;
    0xd3; 0xd2; 0xdd; 0xdc; 0xe3; 0xe2; 0xed; 0xec;
    0x96; 0x97; 0x92; 0x91; 0x8c; 0x8d; 0x82; 0x83;
    0xd4; 0xd7; 0xd8; 0xdb; 0xe4; 0xe7; 0xe8; 0xeb;
    0x95; 0x94; 0x93; 0x90; 0x8f; 0x8e; 0x81; 0x80;
    0xd5; 0xd6; 0xd9; 0xda; 0xe5; 0xe6; 0xe9; 0xea;
    0x6a; 0x6b; 0x6c; 0x6f; 0x70; 0x71; 0x7e; 0x7f;
    0x2a; 0x29; 0x26; 0x25; 0x1a; 0x19; 0x16; 0x15;
    0x69; 0x68; 0x6d; 0x6e; 0x73; 0x72; 0x7d; 0x7c;
    0x2b; 0x28; 0x27; 0x24; 0x1b; 0x18; 0x17; 0x14;
    0x66; 0x67; 0x62; 0x61; 0x74; 0x77; 0x78; 0x7b;
    0x2c; 0x2d; 0x22; 0x23; 0x1c; 0x1d; 0x12; 0x13;
    0x65; 0x64; 0x63; 0x60; 0x75; 0x76; 0x79; 0x7a;
    0x2f; 0x2e; 0x21; 0x20; 0x1f; 0x1e; 0x11; 0x10;
    0x5a; 0x5b; 0x5c; 0x5f; 0x4a; 0x49; 0x46; 0x45;
    0x30; 0x33; 0x34; 0x35; 0x0a; 0x0b; 0x0c; 0x0f;
    0x59; 0x58; 0x5d; 0x5e; 0x4b; 0x48; 0x47; 0x44;
    0x31; 0x32; 0x37; 0x36; 0x09; 0x08; 0x0d; 0x0e;
    0x56; 0x57; 0x52; 0x51; 0x4c; 0x4d; 0x42; 0x43;
    0x3e; 0x3d; 0x38; 0x39; 0x06; 0x07; 0x02; 0x01;
    0x55; 0x54; 0x53; 0x50; 0x4f; 0x4e; 0x41; 0x40;
    0x3f; 0x3c; 0x3b; 0x3a; 0x05; 0x04; 0x03; 0x00;
    0xaa; 0xa9; 0xa6; 0xa5; 0x9a; 0x99; 0x96; 0x95;
    0x6a; 0x69; 0x66; 0x65; 0x5a; 0x59; 0x56; 0x55;
    0xab; 0xa8; 0xa7; 0xa4; 0x9b; 0x98; 0x97; 0x94;
    0x6b; 0x68; 0x67; 0x64; 0x5b; 0x58; 0x57; 0x54;
    0xac; 0xad; 0xa2; 0xa3; 0x9c; 0x9d; 0x92; 0x93;
    0x6c; 0x6d; 0x62; 0x63; 0x5c; 0x5d; 0x52; 0x53;
    0xaf; 0xae; 0xa1; 0xa0; 0x9f; 0x9e; 0x91; 0x90;
    0x6f; 0x6e; 0x61; 0x60; 0x5f; 0x5e; 0x51; 0x50;
    0xb0; 0xb3; 0xb4; 0xb5; 0x8a; 0x8b; 0x8c; 0x8f;
    0x70; 0x73; 0x74; 0x75; 0x4a; 0x4b; 0x4c; 0x4f;
    0xb1; 0xb2; 0xb7; 0xb6; 0x89; 0x88; 0x8d; 0x8e;
    0x71; 0x72; 0x77; 0x76; 0x49; 0x48; 0x4d; 0x4e;
    0xbe; 0xbd; 0xb8; 0xb9; 0x86; 0x87; 0x82; 0x81;
    0x7e; 0x7d; 0x78; 0x79; 0x46; 0x47; 0x42; 0x41;
    0xbf; 0xbc; 0xbb; 0xba; 0x85; 0x84; 0x83; 0x80;
    0x7f; 0x7c; 0x7b; 0x7a; 0x45; 0x44; 0x43; 0x40;
    0xc0; 0xc1; 0xce; 0xcf; 0xd0; 0xd3; 0xd4; 0xd5;
    0x2a; 0x2b; 0x2c; 0x2f; 0x30; 0x31; 0x3e; 0x3f;
    0xc3; 0xc2; 0xcd; 0xcc; 0xd1; 0xd2; 0xd7; 0xd6;
    0x29; 0x28; 0x2d; 0x2e; 0x33; 0x32; 0x3d; 0x3c;
    0xc4; 0xc7; 0xc8; 0xcb; 0xde; 0xdd; 0xd8; 0xd9;
    0x26; 0x27; 0x22; 0x21; 0x34; 0x37; 0x38; 0x3b;
    0xc5; 0xc6; 0xc9; 0xca; 0xdf; 0xdc; 0xdb; 0xda;
    0x25; 0x24; 0x23; 0x20; 0x35; 0x36; 0x39; 0x3a;
    0xfa; 0xf9; 0xf6; 0xf5; 0xe0; 0xe3; 0xe4; 0xe5;
    0x1a; 0x1b; 0x1c; 0x1f; 0x0a; 0x09; 0x06; 0x05;
    0xfb; 0xf8; 0xf7; 0xf4; 0xe1; 0xe2; 0xe7; 0xe6;
    0x19; 0x18; 0x1d; 0x1e; 0x0b; 0x08; 0x07; 0x04;
    0xfc; 0xfd; 0xf2; 0xf3; 0xee; 0xed; 0xe8; 0xe9;
    0x16; 0x17; 0x12; 0x11; 0x0c; 0x0d; 0x02; 0x03;
    0xff; 0xfe; 0xf1; 0xf0; 0xef; 0xec; 0xeb; 0xea;
    0x15; 0x14; 0x13; 0x10; 0x0f; 0x0e; 0x01; 0x00|]

let quadrant =
  [|0;2;1;0;2;1;0;2;1;0;2;1;0;2;1;0;1;1;3;0;2;3;1;1;3;0;2;3;1;1;3;0;
    3;3;1;0;2;1;3;3;0;2;0;2;3;3;1;0;0;2;3;0;2;3;0;2;1;1;1;1;0;2;3;0;
    1;0;2;1;1;0;2;1;3;3;3;3;0;2;1;0;3;0;2;3;3;0;2;3;0;2;0;2;1;1;3;0;
    0;2;0;2;0;2;0;2;1;0;2;1;3;3;1;0;1;1;1;1;1;1;1;1;3;0;2;3;0;2;3;0;
    3;3;3;3;3;3;3;3;1;0;2;1;0;2;1;0;0;2;0;2;0;2;0;2;3;0;2;3;1;1;3;0;
    1;0;2;1;1;0;2;1;0;2;0;2;3;3;1;0;3;0;2;3;3;0;2;3;1;1;1;1;0;2;3;0;
    0;2;1;0;2;1;0;2;3;3;3;3;0;2;1;0;1;1;3;0;2;3;1;1;0;2;0;2;1;1;3;0;
    3;3;1;0;2;1;3;3;1;0;2;1;3;3;1;0;0;2;3;0;2;3;0;2;3;0;2;3;0;2;3;0;
    1;0;2;1;0;2;1;0;2;1;0;2;1;0;2;1;3;0;2;3;1;1;3;0;2;3;1;1;3;0;2;3;
    0;2;0;2;3;3;1;0;2;1;3;3;0;2;0;2;1;1;1;1;0;2;3;0;2;3;0;2;1;1;1;1;
    3;3;3;3;0;2;1;0;2;1;0;2;3;3;3;3;0;2;0;2;1;1;3;0;2;3;1;1;0;2;0;2;
    1;0;2;1;3;3;1;0;2;1;3;3;1;0;2;1;3;0;2;3;0;2;3;0;2;3;0;2;3;0;2;3;
    0;2;1;0;2;1;0;2;0;2;1;0;2;1;0;2;1;1;3;0;2;3;1;1;1;1;3;0;2;3;1;1;
    3;3;1;0;2;1;3;3;3;3;1;0;2;1;3;3;0;2;3;0;2;3;0;2;0;2;3;0;2;3;0;2;
    1;0;2;1;1;0;2;1;1;0;2;1;1;0;2;1;3;0;2;3;3;0;2;3;3;0;2;3;3;0;2;3;
    0;2;0;2;0;2;0;2;0;2;0;2;0;2;0;2;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;
    2;1;0;2;1;0;2;1;0;2;1;0;2;1;0;2;2;3;1;1;3;0;2;3;1;1;3;0;2;3;1;1;
    2;1;3;3;0;2;0;2;3;3;1;0;2;1;3;3;2;3;0;2;1;1;1;1;0;2;3;0;2;3;0;2;
    2;1;0;2;3;3;3;3;1;0;2;1;1;0;2;1;2;3;1;1;0;2;0;2;3;0;2;3;3;0;2;3;
    2;1;3;3;1;0;2;1;0;2;0;2;0;2;0;2;2;3;0;2;3;0;2;3;1;1;1;1;1;1;1;1;
    2;1;0;2;1;0;2;1;3;3;3;3;3;3;3;3;2;3;1;1;3;0;2;3;0;2;0;2;0;2;0;2;
    2;1;3;3;0;2;0;2;1;0;2;1;1;0;2;1;2;3;0;2;1;1;1;1;3;0;2;3;3;0;2;3;
    2;1;0;2;3;3;3;3;0;2;1;0;2;1;0;2;2;3;1;1;0;2;0;2;1;1;3;0;2;3;1;1;
    2;1;3;3;1;0;2;1;3;3;1;0;2;1;3;3;2;3;0;2;3;0;2;3;0;2;3;0;2;3;0;2;
    3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;3;0;2;0;2;0;2;0;2;0;2;0;2;0;2;0;2;
    1;0;2;1;1;0;2;1;1;0;2;1;1;0;2;1;3;0;2;3;3;0;2;3;3;0;2;3;3;0;2;3;
    0;2;1;0;2;1;0;2;0;2;1;0;2;1;0;2;1;1;3;0;2;3;1;1;1;1;3;0;2;3;1;1;
    3;3;1;0;2;1;3;3;3;3;1;0;2;1;3;3;0;2;3;0;2;3;0;2;0;2;3;0;2;3;0;2;
    1;0;2;1;0;2;1;0;2;1;0;2;1;0;2;1;3;0;2;3;1;1;3;0;2;3;1;1;3;0;2;3;
    0;2;0;2;3;3;1;0;2;1;3;3;0;2;0;2;1;1;1;1;0;2;3;0;2;3;0;2;1;1;1;1;
    3;3;3;3;0;2;1;0;2;1;0;2;3;3;3;3;0;2;0;2;1;1;3;0;2;3;1;1;0;2;0;2;
    1;0;2;1;3;3;1;0;2;1;3;3;1;0;2;1;3;0;2;3;0;2;3;0;2;3;0;2;3;0;2;3|]

let hilbert_coordinate_2 x y =
  let x = ref x in
  let y = ref y in
  let z = ref 0 in
  let n = ref 0 in
  for i = 0 to 7 do
    let j = ((!x lsr 24) land 0xf0) lor ((!y lsr 28) land 0xf) lor !n in
    x := !x lsl 4;
    y := !y lsl 4;
    n := (Array.unsafe_get quadrant j) lsl 8;
    z := (!z lsl 8) lor (Array.unsafe_get bytes j)
(*
;    Format.printf "%x %x %x@." j !n !z
*)
  done;
  !z

let dilate_4 x =
  let x = (x lor (x lsl 16)) land 0x0000FFFF0000FFFF in
  let x = (x lor (x lsl 8)) land  0x00FF00FF00FF00FF in
  let x = (x lor (x lsl 4)) land  0x0F0F0F0F0F0F0F0F in
  x

(* Slower, and we loose the leftmost bit of x *)
let hilbert_coordinate_3 x y =
  let c = ref (((dilate_4 x) lsl 4) lor (dilate_4 y)) in
  let z = ref 0 in
  let n = ref 0 in
  for i = 7 downto 0 do
    let j = ((!c lsr (i lsl 3)) land 0xff) lor !n in
    n := (Array.unsafe_get quadrant j) lsl 8;
    z := (!z lsl 8) lor (Array.unsafe_get bytes j)
  done;
  !z

(* More regular variant of hilbert_coordinate_1 *)
let hilbert_coordinate_4 x y =
  let mask = 0xffffffff in
  let heven = x lxor y in
  let noty = (lnot y) land mask in
  let m00 = (lnot x) land noty in
  let m10 = x land noty in
  let notheven = lnot heven in
  let n1 = ref 0 in
  let n2 = ref 0 in
  for k = 1 to 31 do
(*
    let n1' = (((m10 land (lnot !n2)) lor (m01 land !n2)) lxor !n1) lsr 1 in
    let n2' = (((m11 land !n1) lor (m00 land (lnot !n1))) lxor !n2) lsr 1 in
*)
    let n1' = (m10 lxor (heven land !n2) lxor !n1) lsr 1 in
    let n2' = (m00 lxor ((notheven) land !n1) lxor !n2) lsr 1 in
    n1 := n1';
    n2 := n2'
  done;
  let n0 = !n1 lxor !n2 in
(*
  let hodd = ((y land n0) lor (x land (lnot n0))) lxor !n1 in
*)
  let hodd = (x lxor (heven land n0)) lxor !n1 in
  ((dilate hodd) lsl 1) lor (dilate heven) (*- min_int*)

(* Optimized version of the previous function (log n) *)
(* Could be improved a bit by optimizing the first and last iterations *)
let hilbert_coordinate_5 x y =
  let mask = 0xffffffff in
  let heven = x lxor y in
  let noty = (lnot y) land mask in
  let m00 = (lnot x) land noty in
  let m10 = x land noty in
  let notheven = (lnot heven) land mask in
  let a = ref (-1) in
  let b = ref heven in
  let c = ref m10 in
  let d = ref notheven in
  let e = ref (-1) in
  let f = ref m00 in
  for i = 0 to 4 do
    let k = 1 lsl i in
    let a' = (!a land (!a asr k)) lxor (!b land (!d lsr k)) in
    let b' = (!a land (!b lsr k)) lxor (!b land (!e asr k)) in
    let c' = (!a land (!c lsr k)) lxor (!b land (!f lsr k)) lxor !c in
    let d' = (!d land (!a asr k)) lxor (!e land (!d lsr k)) in
    let e' = (!d land (!b lsr k)) lxor (!e land (!e asr k)) in
    let f' = (!d land (!c lsr k)) lxor (!e land (!f lsr k)) lxor !f in
    a := a';
    b := b';
    c := c';
    d := d';
    e := e';
    f := f'
  done;
  let n1 = !c in
  let n2 = !f in
  let n0 = n1 lxor n2 in
  let hodd = (x lxor (heven land n0)) lxor n1 in
  ((dilate hodd) lsl 1) lor (dilate heven) (*- min_int*)

let _ =
  let accu = ref 0 in
  let x = ref 1 in
  let y = ref 1 in
  for i = 0 to 30000000 - 1 do
    x := (!x * 2234039081) land 0xffffffff;
    y := (!y * 269614307)   land 0xffffffff;
    accu := !accu + hilbert_coordinate_2 !x !y
  done;
  Format.printf "%x@." !accu

(*
let _ =
let x = 0x80000000 in
let y = 0x40000000 in
Format.eprintf "%x %x@." (hilbert_coordinate_1 x y) (hilbert_coordinate_2 x y)
*)
